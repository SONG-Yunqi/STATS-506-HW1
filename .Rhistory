cor(abalone[4:9])
cor(abalone[4:9])
abalone = read.table('abalone.data',sep = ',')
names(abalone) = c('sex','length','diam','height','whole','shucked',
'viscera','shell','rings')
head(abalone)
table(abalone$sex)
cor(abalone[4:9])
cor(abalone[4:9])
for s in c('F','I','M'){
for (s in c('F','I','M')){
print(s)
}
for (s in c('F','I','M')){
data = abalone[abalone$sex == s]
corr = cor(data[c(8,9)])
print(corr)
}
for (s in c('F','I','M')){
data = abalone[abalone$sex == s,]
corr = cor(data[c(8,9)])
print(corr)
}
for (s in c('F','I','M')){
data = abalone[abalone$sex == s,]
corr = cor(data[c(8,9)])[1,2]
print()
print(corr)
}
for (s in c('F','I','M')){
data = abalone[abalone$sex == s,]
corr = cor(data[c(8,9)])[1,2]
print(s)
print(corr)
}
for (s in c('F','I','M')){
data = abalone[abalone$sex == s,]
corr = cor(data[c(8,9)])[1,2]
print(paste(s,':',corr))
}
abalone[which.max(abalone$rings),]
abalone[abalone$rings == 29,]
abalone[which.max(abalone$rings),]
nrow(abalone[abalone$viscera > abalone$shell,])
nrow(abalone[abalone$viscera > abalone$shell,])/nrow(abalone)
female_cors = cor(abalone[abalone$sex == 'F',4:9])
female_cors
cor(abalone[4:9])
for (s in c('F','I','M')){
data = abalone[abalone$sex == s,]
corr = cor(data[c(8,9)])[1,2]
print(paste(s,':',corr))
}
abalone[which.max(abalone$rings),]
nrow(abalone[abalone$viscera > abalone$shell,])/nrow(abalone)
cor(abalone[5:9])
nrow(abalone[abalone$viscera > abalone$shell,])/nrow(abalone)
female_cors = cor(abalone[abalone$sex == 'F',5:9])[]
female_cors
female_cors = cor(abalone[abalone$sex == 'F',5:9])[5,]
female_cors
female_cors = cor(abalone[abalone$sex == 'F',5:9])[5,1:4]
female_cors
female_cors = cor(abalone[abalone$sex == 'F',5:9])[5,1:4]
male_cors = cor(abalone[abalone$sex == 'M',5:9])[5,1:4]
infant_cors = cor(abalone[abalone$sex == 'I',5:9])[5,1:4]
cor_table = rbind(female_cors,male_cors,infant_cors)
cor_table
female_cors = cor(abalone[abalone$sex == 'F',5:9])[5,1:4]
male_cors = cor(abalone[abalone$sex == 'M',5:9])[5,1:4]
infant_cors = cor(abalone[abalone$sex == 'I',5:9])[5,1:4]
cor_table = rbind(female_cors,male_cors,infant_cors)
rownames(cor_table) = c('female','male','infant')
cor_table
t.test(abalone[abalone$sex == 'F','rings'], abalone[abalone$sex == 'F','rings'])
summary(t.test(abalone[abalone$sex == 'F','rings'], abalone[abalone$sex == 'F','rings']))
print(t.test(abalone[abalone$sex == 'F','rings'], abalone[abalone$sex == 'F','rings']))
t.test(abalone[abalone$sex == 'F','rings'], abalone[abalone$sex == 'F','rings'])
t.test(abalone[abalone$sex == 'F','rings'], abalone[abalone$sex == 'M','rings'])
t.test(abalone[abalone$sex == 'F','rings'], abalone[abalone$sex == 'I','rings'])
t.test(abalone[abalone$sex == 'I','rings'], abalone[abalone$sex == 'M','rings'])
food = read.table('food_expenditure.csv')
food = read.csv('food_expenditure.csv')
View(food)
names(food) = c('id','age','','individual','currency','total','grocery','dining','miscellaneous','dining_time','is_alcohol','program')
View(food)
names(food) = c('id','age','individual','state','currency','total','grocery','dining','miscellaneous','dining_time','is_alcohol','program')
View(food)
print(paste('before restriction:',nrow(food)))
print(paste('before restriction:',nrow(food)))
food = food[food$currency == 'USD',]
print(paste('after restriction:',nrow(food)))
food = food[food$age >= 18 && !is.na(food$age)]
food = food[food$age >= 18 & !is.na(food$age)]
food = food[(food$age >= 18) && (!is.na(food$age)),]
food = food[(food$age >= 18) & (!is.na(food$age)),]
View(food)
food = read.csv('food_expenditure.csv')
names(food) = c('id','age','individual','state','currency','total','grocery','dining','miscellaneous','dining_time','is_alcohol','program')
print(paste('before restriction:',nrow(food)))
food = food[food$currency == 'USD',]
print(paste('after restriction:',nrow(food)))
food = food[(food$age >= 18) & (food$age <= 90) & (!is.na(food$age)),]
View(food)
food = food[(food$state != '') & (!is.na(food$state)),]
class(food)
summary(food)
class(food$total)
food[6:9]
food[6:9] = apply(food[6:9],c(1,2),as.numeric)
food[6:9] = apply(food[6:9],c(1,2),suppressWarnings(as.numeric)
food = read.csv('food_expenditure.csv')
names(food) = c('id','age','individual','state','currency','total','grocery','dining','miscellaneous','dining_time','is_alcohol','program')
print(paste('before restriction:',nrow(food)))
food = food[food$currency == 'USD',]
print(paste('after restriction:',nrow(food)))
food = food[(food$age >= 18) & (food$age <= 90) & (!is.na(food$age)),]
food = read.csv('food_expenditure.csv')
names(food) = c('id','age','individual','state','currency','total','grocery','dining','miscellaneous','dining_time','is_alcohol','program')
print(paste('before restriction:',nrow(food)))
food = food[food$currency == 'USD',]
print(paste('after restriction:',nrow(food)))
food = food[(food$age >= 18) & (food$age <= 90) & (!is.na(food$age)),]
food = food[(food$state != '') & (!is.na(food$state)),]
food[6:9] = apply(food[6:9],c(1,2),function(x) suppressWarnings(as.numeric(x)))
food[6:9] = apply(food[6:9],c(1,2),function(x) suppressWarnings(as.numeric(x)))
food = food[apply(food[6:9],1,function(x) all((!is.na(x)) & (x != '') & (x > 0)),]
food[6:9] = apply(food[6:9],c(1,2),function(x) suppressWarnings(as.numeric(x)))
food = food[apply(food[6:9],1,function(x) all((!is.na(x)) & (x != '') & (x > 0))),]
View(food)
food[6:9] = apply(food[6:9],c(1,2),function(x) suppressWarnings(as.numeric(x)))
food = food[apply(food[6:9],1,function(x) all((!is.na(x)) & (x != '') & (x > 0))),]
food = food[food$total >= food$grocery + food$dining + food$miscellaneous]
food[6:9] = apply(food[6:9],c(1,2),function(x) suppressWarnings(as.numeric(x)))
food = food[apply(food[6:9],1,function(x) all((!is.na(x)) & (x != '') & (x > 0))),]
food = food[food$total >= food$grocery + food$dining + food$miscellaneous,]
food = food[!((food$dining > 0) & (food$dining_time == 0)),]
nrow(food)
abalone = read.table('abalone.data',sep = ',')
names(abalone) = c('sex','length','diam','height','whole','shucked',
'viscera','shell','rings')
head(abalone)
cor(abalone[5:9])
for (s in c('F','I','M')){
data = abalone[abalone$sex == s,]
corr = cor(data[c(8,9)])[1,2]
print(paste(s,':',corr))
}
abalone[which.max(abalone$rings),]
nrow(abalone[abalone$viscera > abalone$shell,])/nrow(abalone)
female_cors = cor(abalone[abalone$sex == 'F',5:9])[5,1:4]
male_cors = cor(abalone[abalone$sex == 'M',5:9])[5,1:4]
infant_cors = cor(abalone[abalone$sex == 'I',5:9])[5,1:4]
cor_table = rbind(female_cors,male_cors,infant_cors)
rownames(cor_table) = c('female','male','infant')
cor_table
t.test(abalone[abalone$sex == 'F','rings'], abalone[abalone$sex == 'M','rings'])
t.test(abalone[abalone$sex == 'F','rings'], abalone[abalone$sex == 'I','rings'])
t.test(abalone[abalone$sex == 'I','rings'], abalone[abalone$sex == 'M','rings'])
food = read.csv('food_expenditure.csv')
names(food) = c('id','age','individual','state','currency','total','grocery','dining','miscellaneous','dining_time','is_alcohol','program')
print(paste('before restriction:',nrow(food)))
food = food[food$currency == 'USD',]
print(paste('after restriction:',nrow(food)))
food = food[(food$age >= 18) & (food$age <= 90) & (!is.na(food$age)),]
food = food[(food$state != '') & (!is.na(food$state)),]
food[6:9] = apply(food[6:9],c(1,2),function(x) suppressWarnings(as.numeric(x)))
food = food[apply(food[6:9],1,function(x) all((!is.na(x)) & (x != '') & (x > 0))),]
food = food[food$total >= food$grocery + food$dining + food$miscellaneous,]
food = food[!((food$dining > 0) & (food$dining_time == 0)),]
nrow(food)
install.packages('roxygen2')
library(roxygen2)
install.packages('roxygen2')
library(roxygen2)
install.packages("roxygen2")
#' function to get the next number in a Collatz sequence
#' @param x a positive interger input
#' @return the next integer number in the Collatz sequence of x
nextCollatz = function(x){
if (x < 0) or (!is.numeric(x)) or (x %% 1 != 0){
#' function to get the next number in a Collatz sequence
#' @param x a positive interger input
#' @return the next integer number in the Collatz sequence of x
nextCollatz = function(x){
if ((x < 0) or (!is.numeric(x)) or (x %% 1 != 0)){
#' function to get the next number in a Collatz sequence
#' @param x a positive integer input
#' @return the next integer number in the Collatz sequence of x
nextCollatz = function(x){
if ((x < 0) || (!is.numeric(x)) || (x %% 1 != 0)){
stop('the input is not a positive integer')
}
if (x %% 2 == 0){
return(x/2)
} else{
return(3*x+1)
}
}
print(nextCollatz(5))
print(nextCollatz(16))
#' function to get the Collatz sequence
#' @param x a positive integer input
#' @return A list containing the vector of the entries in the Collatz sequence, beginning at the input and ending at 1
collatzSequence = function(x){
if ((x < 0) || (!is.numeric(x)) || (x %% 1 != 0)){
stop('the input is not a positive integer')
}
result = c()
next_num = x
repeat {
if (next_num == 1) break
append(result,next_num)
next_num = nextCollatz(x)
}
return(result)
}
print(collatzSequence(5))
print(collatzSequence(1))
print(collatzSequence(2))
print(collatzSequence(3))
#' function to get the Collatz sequence
#' @param x a positive integer input
#' @return A list containing the vector of the entries in the Collatz sequence, beginning at the input and ending at 1
collatzSequence = function(x){
if ((x < 0) || (!is.numeric(x)) || (x %% 1 != 0)){
stop('the input is not a positive integer')
}
result = c()
next_num = x
while (next_num != 1){
append(result,next_num)
next_num = nextCollatz(x)
}
append(result,1)
return(result)
}
print(collatzSequence(3))
#' function to get the Collatz sequence
#' @param x a positive integer input
#' @return A list containing the vector of the entries in the Collatz sequence, beginning at the input and ending at 1
collatzSequence = function(x){
if ((x < 0) || (!is.numeric(x)) || (x %% 1 != 0)){
stop('the input is not a positive integer')
}
result = c()
next_num = x
while (next_num != 1){
append(result,next_num)
next_num = nextCollatz(next_num)
}
append(result,1)
return(result)
}
print(collatzSequence(3))
#' function to get the Collatz sequence
#' @param x a positive integer input
#' @return A list containing the vector of the entries in the Collatz sequence, beginning at the input and ending at 1
collatzSequence = function(x){
if ((x < 0) || (!is.numeric(x)) || (x %% 1 != 0)){
stop('the input is not a positive integer')
}
result = c()
next_num = x
while (next_num != 1){
result = append(result,next_num)
next_num = nextCollatz(next_num)
}
result = append(result,1)
return(result)
}
print(collatzSequence(3))
print(collatzSequence(5))
print(collatzSequence(19))
sapply(1:10,function(x) length(collatzSequence(x)))
lens = sapply(100:500,function(x) length(collatzSequence(x)))
max_len_num = which.max(lens) + 99
min_len_num = which.min(lens) + 99
print(paste('lowest number giving the max sequence length:',max_len_num))
print(paste('lowest number giving the min sequence length:',min_len_num))
max_len_num[29]
lens[29]
lens[28]
lens[30]
lens = sapply(100:500,function(x) length(collatzSequence(x)))
max_len_num = which.max(lens) + 99
min_len_num = which.min(lens) + 99
print(paste('lowest number giving the longest sequence:',max_len_num))
print(paste('lowest number giving the shortest sequence length:',min_len_num))
lens[228]
abalone = read.table('abalone.data',sep = ',')
names(abalone) = c('sex','length','diam','height','whole','shucked',
'viscera','shell','rings')
head(abalone)
cor(abalone[5:9])
for (s in c('F','I','M')){
data = abalone[abalone$sex == s,]
corr = cor(data[c(8,9)])[1,2]
print(paste(s,':',corr))
}
abalone[which.max(abalone$rings),]
nrow(abalone[abalone$viscera > abalone$shell,])/nrow(abalone)
female_cors = cor(abalone[abalone$sex == 'F',5:9])[5,1:4]
male_cors = cor(abalone[abalone$sex == 'M',5:9])[5,1:4]
infant_cors = cor(abalone[abalone$sex == 'I',5:9])[5,1:4]
cor_table = rbind(female_cors,male_cors,infant_cors)
rownames(cor_table) = c('female','male','infant')
cor_table
t.test(abalone[abalone$sex == 'F','rings'], abalone[abalone$sex == 'M','rings'])
t.test(abalone[abalone$sex == 'F','rings'], abalone[abalone$sex == 'I','rings'])
t.test(abalone[abalone$sex == 'I','rings'], abalone[abalone$sex == 'M','rings'])
food = read.csv('food_expenditure.csv')
names(food) = c('id','age','individual','state','currency','total','grocery','dining','miscellaneous','dining_time','is_alcohol','program')
print(paste('before restriction:',nrow(food)))
food = food[food$currency == 'USD',]
print(paste('after restriction:',nrow(food)))
food = food[(food$age >= 18) & (food$age <= 90) & (!is.na(food$age)),]
food = food[(food$state != '') & (!is.na(food$state)),]
food[6:9] = apply(food[6:9],c(1,2),function(x) suppressWarnings(as.numeric(x)))
food = food[apply(food[6:9],1,function(x) all((!is.na(x)) & (x != '') & (x > 0))),]
food = food[food$total >= food$grocery + food$dining + food$miscellaneous,]
food = food[!((food$dining > 0) & (food$dining_time == 0)),]
nrow(food)
#' function to get the next number in a Collatz sequence
#' @param x a positive integer input
#' @return the next integer number in the Collatz sequence of x
nextCollatz = function(x){
if ((x < 0) || (!is.numeric(x)) || (x %% 1 != 0)){
stop('the input is not a positive integer')
}
if (x %% 2 == 0){
return(x/2)
} else{
return(3*x+1)
}
}
print(nextCollatz(5))
print(nextCollatz(16))
#' function to get the Collatz sequence
#' @param x a positive integer input
#' @return A list containing the vector of the entries in the Collatz sequence, beginning at the input and ending at 1
collatzSequence = function(x){
if ((x < 0) || (!is.numeric(x)) || (x %% 1 != 0)){
stop('the input is not a positive integer')
}
result = c()
next_num = x
while (next_num != 1){
result = append(result,next_num)
next_num = nextCollatz(next_num)
}
result = append(result,1)
return(result)
}
print(collatzSequence(5))
print(collatzSequence(19))
abalone = read.table('abalone.data',sep = ',')
names(abalone) = c('sex','length','diam','height','whole','shucked',
'viscera','shell','rings')
head(abalone)
cor(abalone[5:9])
for (s in c('F','I','M')){
data = abalone[abalone$sex == s,]
corr = cor(data[c(8,9)])[1,2]
print(paste(s,':',corr))
}
abalone[which.max(abalone$rings),]
nrow(abalone[abalone$viscera > abalone$shell,])/nrow(abalone)
female_cors = cor(abalone[abalone$sex == 'F',5:9])[5,1:4]
male_cors = cor(abalone[abalone$sex == 'M',5:9])[5,1:4]
infant_cors = cor(abalone[abalone$sex == 'I',5:9])[5,1:4]
cor_table = rbind(female_cors,male_cors,infant_cors)
rownames(cor_table) = c('female','male','infant')
cor_table
t.test(abalone[abalone$sex == 'F','rings'], abalone[abalone$sex == 'M','rings'])
t.test(abalone[abalone$sex == 'F','rings'], abalone[abalone$sex == 'I','rings'])
t.test(abalone[abalone$sex == 'I','rings'], abalone[abalone$sex == 'M','rings'])
food = read.csv('food_expenditure.csv')
names(food) = c('id','age','individual','state','currency','total','grocery','dining','miscellaneous','dining_time','is_alcohol','program')
print(paste('before restriction:',nrow(food)))
food = food[food$currency == 'USD',]
print(paste('after restriction:',nrow(food)))
food = food[(food$age >= 18) & (food$age <= 90) & (!is.na(food$age)),]
food = food[(food$state != '') & (!is.na(food$state)),]
food[6:9] = apply(food[6:9],c(1,2),function(x) suppressWarnings(as.numeric(x)))
food = food[apply(food[6:9],1,function(x) all((!is.na(x)) & (x != '') & (x > 0))),]
food = food[food$total >= food$grocery + food$dining + food$miscellaneous,]
food = food[!((food$dining > 0) & (food$dining_time == 0)),]
nrow(food)
#' function to get the next number in a Collatz sequence
#' @param x a positive integer input
#' @return the next integer number in the Collatz sequence of x
nextCollatz = function(x){
if ((x < 0) || (!is.numeric(x)) || (x %% 1 != 0)){
stop('the input is not a positive integer')
}
if (x %% 2 == 0){
return(x/2)
} else{
return(3*x+1)
}
}
print(nextCollatz(5))
print(nextCollatz(16))
#' function to get the Collatz sequence
#' @param x a positive integer input
#' @return A list containing the vector of the entries in the Collatz sequence, beginning at the input and ending at 1
collatzSequence = function(x){
if ((x < 0) || (!is.numeric(x)) || (x %% 1 != 0)){
stop('the input is not a positive integer')
}
result = c()
next_num = x
while (next_num != 1){
result = append(result,next_num)
next_num = nextCollatz(next_num)
}
result = append(result,1)
return(result)
}
print(collatzSequence(5))
print(collatzSequence(19))
lens = sapply(100:500,function(x) length(collatzSequence(x)))
max_len_num = which.max(lens) + 99
min_len_num = which.min(lens) + 99
print(paste('lowest number giving the longest sequence:',max_len_num))
print(paste('lowest number giving the shortest sequence length:',min_len_num))
abalone = read.table('abalone.data',sep = ',')
names(abalone) = c('sex','length','diam','height','whole','shucked',
'viscera','shell','rings')
head(abalone)
table(abalone$sex)
cor(abalone[5:9])
for (s in c('F','I','M')){
data = abalone[abalone$sex == s,]
corr = cor(data[c(8,9)])[1,2]
print(paste(s,':',corr))
}
abalone[which.max(abalone$rings),]
nrow(abalone[abalone$viscera > abalone$shell,])/nrow(abalone)
female_cors = cor(abalone[abalone$sex == 'F',5:9])[5,1:4]
male_cors = cor(abalone[abalone$sex == 'M',5:9])[5,1:4]
infant_cors = cor(abalone[abalone$sex == 'I',5:9])[5,1:4]
cor_table = rbind(female_cors,male_cors,infant_cors)
rownames(cor_table) = c('female','male','infant')
cor_table
t.test(abalone[abalone$sex == 'F','rings'], abalone[abalone$sex == 'M','rings'])
t.test(abalone[abalone$sex == 'F','rings'], abalone[abalone$sex == 'I','rings'])
t.test(abalone[abalone$sex == 'I','rings'], abalone[abalone$sex == 'M','rings'])
food = read.csv('food_expenditure.csv')
names(food) = c('id','age','individual','state','currency','total','grocery','dining','miscellaneous','dining_time','is_alcohol','program')
print(paste('before restriction:',nrow(food)))
food = food[food$currency == 'USD',]
print(paste('after restriction:',nrow(food)))
food = food[(food$age >= 18) & (food$age <= 90) & (!is.na(food$age)),]
food = food[(food$state != '') & (!is.na(food$state)),]
food[6:9] = apply(food[6:9],c(1,2),function(x) suppressWarnings(as.numeric(x)))
food = food[apply(food[6:9],1,function(x) all((!is.na(x)) & (x != '') & (x > 0))),]
food = food[food$total >= food$grocery + food$dining + food$miscellaneous,]
food = food[!((food$dining > 0) & (food$dining_time == 0)),]
nrow(food)
#' function to get the next number in a Collatz sequence
#' @param x a positive integer input
#' @return the next integer number in the Collatz sequence of x
nextCollatz = function(x){
if ((x < 0) || (!is.numeric(x)) || (x %% 1 != 0)){
stop('the input is not a positive integer')
}
if (x %% 2 == 0){
return(x/2)
} else{
return(3*x+1)
}
}
print(nextCollatz(5))
print(nextCollatz(16))
#' function to get the Collatz sequence
#' @param x a positive integer input
#' @return A list containing the vector of the entries in the Collatz sequence, beginning at the input and ending at 1
collatzSequence = function(x){
if ((x < 0) || (!is.numeric(x)) || (x %% 1 != 0)){
stop('the input is not a positive integer')
}
result = c()
next_num = x
while (next_num != 1){
result = append(result,next_num)
next_num = nextCollatz(next_num)
}
result = append(result,1)
return(result)
}
print(collatzSequence(5))
print(collatzSequence(19))
lens = sapply(100:500,function(x) length(collatzSequence(x)))
max_len_num = which.max(lens) + 99
min_len_num = which.min(lens) + 99
print(paste('lowest number giving the longest sequence:',max_len_num))
print(paste('lowest number giving the shortest sequence length:',min_len_num))
